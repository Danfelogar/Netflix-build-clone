{"version":3,"sources":["features/userSlice.js","firebase.js","Requests.js","axios.js","components/Banner.js","components/Nav.js","components/Row.js","Router/HomeScreen.js","Router/SignupScreen.js","Router/LoginScreen.js","features/priceSlice.js","Router/PaypalScreen.js","components/PlansSubscription.js","Router/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Banner","useState","movie","setMovie","useEffect","fetchData","a","get","request","data","results","Math","floor","random","length","console","log","string","n","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","title","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","priceSlice","setPrice","price","selectPrice","PayPalButton","paypal","Buttons","driver","React","ReactDOM","PaypalScreen","useSelector","onApprove","order","capture","createOrder","purchase_units","description","amount","currency_code","PlansSubscription","cost","children","dispatch","useDispatch","handleClick","ProfileScreen","email","signOut","App","onAuthStateChanged","userAuth","uid","path","store","configureStore","reducer","userReducer","priceReducer","Boolean","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.286c3e8e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCE9ou9nfc1n8FsC8v3VBs0z21LbrHyp5s\",\r\n    authDomain: \"netflix-clone-1ec7f.firebaseapp.com\",\r\n    projectId: \"netflix-clone-1ec7f\",\r\n    storageBucket: \"netflix-clone-1ec7f.appspot.com\",\r\n    messagingSenderId: \"252215488353\",\r\n    appId: \"1:252215488353:web:a9b25b3cce51705d72df20\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;","//Typically we would store in {process.env.API_KEY}\r\nconst API_KEY = \"1152c929c9e93dfd88b4c3605645eae4\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&lenguage=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&lenguage=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n\r\n//ejem:\r\n\r\n//https://api.themoviedb.org/3/trending/all/week?api_key=1152c929c9e93dfd88b4c3605645eae4&lenguage=en-US","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from '../axios';\r\nimport '../style/Banner.css';\r\nimport requests from '../Requests';\r\n\r\n\r\nexport const Banner = () => {\r\n\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData=  async() => {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n    console.log(movie);\r\n\r\n    const truncate= (string, n) =>{\r\n        /*resume y acorta texto string es el tipo y n el numero de caracteres en este caso de letras lo uso a la hora de tener biblias de texto */\r\n        return string?.length > n\r\n        ? string.substr(0, n - 1) + '...'\r\n        : string;\r\n    }\r\n    return (\r\n        <header\r\n        className=\"banner\"\r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\" ,\r\n        }}>\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My list</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview,200)}</h1>\r\n            </div>\r\n\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport '../style/Nav.css';\r\n\r\n\r\nexport const Nav = () => {\r\n    const [show, handleShow] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const transitionNavBar = () =>{\r\n        if(window.scrollY >100) {\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar);\r\n        return () =>window.removeEventListener(\"scroll\",transitionNavBar);\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${ show && `nav__black` } `}>\r\n            <div className=\"nav__contents\">\r\n                <img\r\n                onClick={() => history.push(\"/\")}\r\n                className=\"nav__logo\"\r\n                src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\" alt=\"netflix-logo\" />\r\n\r\n                <img\r\n                onClick={() => history.push(\"/profile\")}\r\n                className=\"nav__avatar\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"netflix-avatar\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport axios from '../axios';\r\nimport '../style/Row.css'\r\n\r\nexport const Row = ({ title, fetchUrl, isLargeRow = false }) => {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async() =>{\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n    console.log(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                                {/* con esto prevengo renderizar links muertos util para no presentar informacion vacia en la web con condicionales por cumplir ejem ([(isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path &&]) */}\r\n                {movies.map(\r\n                    (movie) =>\r\n                    ((isLargeRow && movie.poster_path) || (!isLargeRow && movie.backdrop_path)) && (\r\n                        <img\r\n                        className={` row__poster ${isLargeRow && \"row__posterLarge\" } `}\r\n                        key={ movie.id }\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                    )\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport requests from '../Requests';\r\nimport '../style/HomeScreen.css';\r\nimport { Banner } from '../components/Banner';\r\nimport { Nav } from '../components/Nav';\r\nimport { Row } from '../components/Row';\r\n\r\n\r\nexport const HomeScreen = () => {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            <Nav />\r\n            <Banner />\r\n            <Row\r\n                title='NETFLIX ORIGINALS'\r\n                fetchUrl={ requests.fetchNetflixOriginals }\r\n                isLargeRow\r\n            />\r\n            <Row\r\n                title='Trending Now'\r\n                fetchUrl={ requests.fetchTrending }\r\n            />\r\n            <Row\r\n                title='Top Rated'\r\n                fetchUrl={ requests.fetchTopRated }\r\n            />\r\n            <Row\r\n                title='Action Movies'\r\n                fetchUrl={ requests.fetchActionMovies }\r\n            />\r\n            <Row\r\n                title='Comedy Movies'\r\n                fetchUrl={ requests.fetchComedyMovies }\r\n            />\r\n            <Row\r\n                title='Horror Movies'\r\n                fetchUrl={ requests.fetchHorrorMovies }\r\n            />\r\n            <Row\r\n                title='Romance Movies'\r\n                fetchUrl={ requests.fetchRomanceMovies }\r\n            />\r\n            <Row\r\n                title='Documentaries'\r\n                fetchUrl={ requests.fetchDocumentaries }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useRef } from 'react';\r\n\r\nimport { auth } from '../firebase';\r\nimport '../style/SignupScreen.css';\r\n\r\nexport const SignupScreen = () => {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser) =>{\r\n            console.log(authUser)\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message);\r\n        });\r\n    };\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser) =>{\r\n            console.log(authUser)\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"signupScreen\">\r\n\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={ emailRef } type=\"email\" placeholder=\"Email\" />\r\n                <input ref={ passwordRef } type=\"password\" placeholder=\"Password\" />\r\n                <button type=\"submit\"\r\n                onClick={signIn}\r\n                >Sign In</button>\r\n                <h4>\r\n                <span className=\"signupScreen__gray\">New to Netflix? </span>\r\n                <span className=\"signupScreen__link\"\r\n                onClick={register}\r\n                >Sign Up now.</span>\r\n                </h4>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport '../style/LoginScreen.css';\r\nimport { SignupScreen } from './SignupScreen';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className=\"loginScreen\">\r\n            <div className=\"loginScreen__background\">\r\n                <img\r\n                className=\"loginScreen__logo\"\r\n                src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5.png\" alt=\"netflix-logo\"/>\r\n                <button className=\"loginScreen__button\"\r\n                onClick={() => setSignIn(true)}\r\n                >\r\n                    Sign In\r\n                </button>\r\n                <div className=\"loginScreen_gradient\"/>\r\n            </div>\r\n            <div className=\"loginScreen__body\">\r\n                {\r\n                    signIn ? (\r\n                        <SignupScreen />\r\n                    )\r\n                    : (\r\n                        <>\r\n                            <h1>Unlimited films, TV programmes and more</h1>\r\n                            <h2>Watch anywhere.Cancel at any time.</h2>\r\n                            <h3>Ready to watch? Enter your email  to  create   or restart your membership</h3>\r\n\r\n                            <div className=\"loginScreen__input\">\r\n                                <form>\r\n                                    <input type=\"email\"\r\n                                        placeholder=\"Email Address\"\r\n                                    />\r\n                                    <button\r\n                                    onClick={() => setSignIn(true)}\r\n                                    className=\"loginScreen__getStarted\">GET STARTED</button>\r\n                                </form>\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// https://genotipia.com/mi_content/uploads/2020/04/Netflix-Background-prueba-1.jpg\" alt=\"login-background\"","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const priceSlice = createSlice({\r\n    name: 'price',\r\n    initialState: {\r\n    value: 0,\r\n},\r\nreducers: {\r\n    setPrice: (state, action) => {\r\n        state.price = action.payload;\r\n    },\r\n},\r\n});\r\n\r\nexport const { setPrice } = priceSlice.actions;\r\n\r\nexport const selectPrice = (state) => state.price.price;\r\n\r\nexport default priceSlice.reducer;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectPrice } from '../features/priceSlice';\r\nimport '../style/PaypalScreen.css';\r\n\r\n\r\nimport ReactDOM from \"react-dom\"\r\n\r\nconst PayPalButton = window.paypal.Buttons.driver(\"react\", { React, ReactDOM });\r\n\r\nexport const PaypalScreen = () => {\r\n\r\n    const price = useSelector(selectPrice);\r\n\r\n    const createOrder= (data, actions) => {\r\n        return actions.order.create({\r\n            purchase_units: [\r\n            {\r\n                description: \"Netflix subscription\",\r\n                amount: {\r\n                currency_code: \"USD\",\r\n                value: price,\r\n                }\r\n            },\r\n            ],\r\n        });\r\n}\r\n        const onApprove = async(data, actions) => {\r\n            return await actions.order.capture();\r\n        };\r\n\r\n            return (\r\n                <div className=\"paypalScreen\">\r\n                    <section className=\"payoalScreen_btn\">\r\n                        <PayPalButton\r\n                            createOrder={(data, actions) =>createOrder(data, actions)}\r\n                            onApprove={(data, actions) =>onApprove(data, actions)}\r\n                        />\r\n                    </section>\r\n                </div>\r\n            );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // render() {\r\n    //     return (\r\n    //     <div className=\"paypalScreen\">\r\n    //         <PayPalButton\r\n    //         createOrder={(data, actions) =>createOrder(data, actions)}\r\n    //         onApprove={(data, actions) =>onApprove(data, actions)}/>\r\n    //     </div>\r\n    //     );\r\n    // }","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { setPrice } from '../features/priceSlice';\r\n\r\nimport '../style/PlansSubscription.css';\r\n\r\nexport const PlansSubscription = ({description,cost,children,}) => {\r\n    // color\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const handleClick = (cost) =>{\r\n        dispatch(setPrice(cost));\r\n        history.push(\"/checkout\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"plansSubscription\">\r\n            <div className=\"plansSubscriotion__description\">\r\n                <h2>{children}</h2>\r\n                <h3>{description}<span>${cost}</span></h3>\r\n            </div>\r\n            <button\r\n            className=\"plansSubscription__btn\"\r\n            onClick={ ()=> handleClick(cost) }\r\n            >\r\n                Subscribe\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// className={\r\n//     (color)\r\n//     ? (\" plansSubscription__btn plansSubscription__btn_gray\")\r\n//     :(\"plansSubscription__btn\")\r\n// }","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Nav } from '../components/Nav';\r\nimport { PlansSubscription } from '../components/PlansSubscription';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { auth } from '../firebase';\r\nimport '../style/ProfileScreen.css';\r\n\r\nexport const ProfileScreen = () => {\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"netflix-avatar\" />\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{ user.email }</h2>\r\n                        <div className=\"proflieScreen__plans\">\r\n                            <h3>Plans</h3>\r\n                            <PlansSubscription description={ \"480p + 1 Screen\" } cost={ 9.27 } >\r\n                                Netflix Standard\r\n                            </PlansSubscription>\r\n                            <PlansSubscription description={  \"1080p full HD + 2 Screen\"} cost={ 13.92 }>\r\n                                Netflix Basic\r\n                            </PlansSubscription>\r\n                            <PlansSubscription description={ \"4K + HDR + 4 Screen\" } cost={ 18.56 } >Netflix Premium\r\n                            </PlansSubscription>\r\n                            <button\r\n                            onClick={ () => auth.signOut() } className=\"profileScreen__signOut\">\r\n                                Sign Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    // color={true}\r\n}\r\n\r\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nimport './App.css';\nimport { login, logout, selectUser } from './features/userSlice';\nimport { auth } from './firebase';\nimport { HomeScreen } from './Router/HomeScreen';\nimport { LoginScreen } from './Router/LoginScreen';\nimport { PaypalScreen } from './Router/PaypalScreen';\nimport { ProfileScreen } from './Router/ProfileScreen';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged(userAuth =>{\n      if (userAuth) {\n        //logged in\n        console.log(userAuth);\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }));\n      } else {\n        //logged out\n        dispatch(logout());\n      }\n    });\n    return console.log(\"good job daniel 🥳\");\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ?(\n          <LoginScreen />\n        ): (\n        <Switch>\n          <Route path=\"/profile\">\n            <ProfileScreen />\n          </Route>\n          <Route path=\"/checkout\">\n            <PaypalScreen />\n          </Route>\n          <Route path=\"/\">\n            <HomeScreen />\n          </Route>\n        </Switch>\n        )}\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport priceReducer from '../features/priceSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    price: priceReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}